

undo ? (simple, 1 seul). => faire un petit tableau contenant des structures de la salle en cours. Ne fonctionnerait que pour la salle ne cours, mais ce serait suffisant.


ok/ checksum sur le fichier
ok/ fichier : header + nb de salles.
ok/ afficher un chiffre de plus sur le Z dans la position d'édition
ok/ faire un truc pour afficher un message (char *, (posx posy, temps))
ok/ afficher l'état des touches Shift, Control, Alt.
ok/ edition de liens dans une direction -1, pour permettre de linker.
ok/ goto room #x
ok/ afficher plus de blocs en bas de l'écran.
ok/ visu par tranches ?
ok/ poke (+ clear) blocs doubles.
ok/ insertion de salle (cas de l'oubli).
ok/ suppression de salle.




format :
N° des salles dans les 4 directions (s16) : h d b g. -1 si rien.
Type de la bordure (u8). (càd l'encadrement de la salle, il y a 3/4 types dufférents).
taille de la salle : x, y (, z?, hstockée ?).
light (yes/no)
datas


faire une passe d'init pour initialiser les pointeurs sur chaque salle ?

gérer la salle avec des cubes.

dim max : 8x8x10



===============================================================================

>>> checksum + header avant clean.
#define	FILE_MAGIC_NUMBER	0xCC170206

#define	LOAD(data_adr, data_type, fprintf_txt) \
		nSz = fread(data_adr, 1, sizeof(data_type), fPt); \
		if (nSz != sizeof(data_type)) \
		{ \
			fprintf(stderr, fprintf_txt); \
			fclose(fPt); \
			exit(1); \
		}

// Lecture du fichier de données.
void Editor_FileLoad(char *pFilename)
{
	FILE	*fPt;
	u32	i;
	s32	nSz;	//, nSzTot;

	assert((sizeof(struct SRoomData) & 3) == 0);

	// fopen.
	if ((fPt = fopen(pFilename, "rb")) == NULL)
	{
		printf("Data file not found. Restart from scratch.\n");
		//
		Room_Add();
		Room_Set(0);
		return;
	}
/*
	// Taille du fichier.
	fseek(fPt, 0, SEEK_END);
	nSzTot = ftell(fPt);
	fseek(fPt, 0, SEEK_SET);
*/

	// Header.
	LOAD(&i, u32, "Editor_FileLoad(): Read error (Header). Loading aborted.\n")
	if (i != FILE_MAGIC_NUMBER)
	{
		fprintf(stderr, "Editor_FileLoad(): Magic number not found. Loading aborted.\n");
		fclose(fPt);
		exit(1);
	}
	u32	nNbRooms;
	LOAD(&nNbRooms, u32, "Editor_FileLoad(): Read error (Header). Loading aborted.\n")

	// Lecture des pièces une par une... hmmm...
	u32	nChkSum = 0;
	u32	nChkSumLoaded;
//	u32	nNbRooms = nSzTot / sizeof(struct SRoomData);
	for (i = 0; i < nNbRooms; i++)
	{
		Room_Add();
		LOAD(*(gppRooms + i), struct SRoomData, "Editor_FileLoad(): Read error. Loading aborted.\n")
/*
		nSz = fread(*(gppRooms + i), 1, sizeof(struct SRoomData), fPt);
		if (nSz != sizeof(struct SRoomData))
		{
			fprintf(stderr, "Editor_FileLoad(): Read error. Loading aborted.\n");
			fclose(fPt);
			exit(1);
		}
*/
		nChkSum += Editor_sub_RoomChecksum((u32 *)*(gppRooms + i), sizeof(struct SRoomData) / 4);
	}

	// Lecture du checksum.
	LOAD(&nChkSumLoaded, u32, "Editor_FileLoad(): Read error (Checksum). Loading aborted.\n")
/*
	nSz = fread(&nChkSumLoaded, 1, sizeof(u32), fPt);
	if (nSz != sizeof(u32))
	{
		fprintf(stderr, "Editor_FileLoad(): Read error (Checksum). Loading aborted.\n");
		fclose(fPt);
		exit(1);
	}
*/

	fclose(fPt);

	// Test du checksum.
	if (nChkSumLoaded != nChkSum)
	{
		fprintf(stderr, "Editor_FileLoad(): Checksum error. Loaded = %X / Calculated = %X. Aborted.\n", nChkSumLoaded, nChkSum);
		fclose(fPt);
		exit(1);
	}

	printf("Data loaded. (%d rooms). Checksum: Loaded = %X / Calculated = %X.\n", nNbRooms, nChkSumLoaded, nChkSum);

	Room_Set(0);

}

#define	SAVE(data_adr, data_type, msg_txt, fprintf_txt) \
	nSz = fwrite(data_adr, 1, sizeof(data_type), fPt); \
	if (nSz != sizeof(data_type)) \
	{ \
		Msg_Init(msg_txt, EDGOTO_POSX, EDGOTO_POSY); \
		fprintf(stderr, fprintf_txt); \
		fclose(fPt); \
		return; \
	} \
	nSzTot += nSz;

// Sauvegarde des salles.
void Editor_FileSave(char *pFilename)
{
	FILE	*fPt;
	u32	i;
	u32	nSz, nSzTot;

	// fopen.
	if ((fPt = fopen(pFilename, "wb")) == NULL)
	{
		Msg_Init("SAVE: FOPEN ERROR.", EDGOTO_POSX, EDGOTO_POSY);
		fprintf(stderr, "Editor_FileSave(): Unable to open data file. Data not saved.\n");
		return;
	}

	// fwrite.
	nSzTot = 0;
	// Micro header.
	i = FILE_MAGIC_NUMBER;
	SAVE(&i, u32, "SAVE: WRITE ERROR (HEADER).", "Editor_FileSave(): Write error (Header). Save aborted.\n")
/*
	nSz = fwrite(&i, 1, sizeof(u32), fPt);
	if (nSz != sizeof(u32))
	{
		Msg_Init("SAVE: WRITE ERROR (HEADER).", EDGOTO_POSX, EDGOTO_POSY);
		fprintf(stderr, "Editor_FileSave(): Write error (Header). Save aborted.\n");
		fclose(fPt);
		return;
	}
	nSzTot += nSz;
*/
	//
	i = gnRoomsNb;
	SAVE(&i, u32, "SAVE: WRITE ERROR (HEADER).", "Editor_FileSave(): Write error (Header). Save aborted.\n")
/*
	nSz = fwrite(&i, 1, sizeof(u32), fPt);
	if (nSz != sizeof(u32))
	{
		Msg_Init("SAVE: WRITE ERROR (HEADER).", EDGOTO_POSX, EDGOTO_POSY);
		fprintf(stderr, "Editor_FileSave(): Write error (Header). Save aborted.\n");
		fclose(fPt);
		return;
	}
	nSzTot += nSz;
*/

	// Rooms.
	u32	nChkSum = 0;
	for (i = 0; i < gnRoomsNb; i++)
	{
		SAVE(*(gppRooms + i), struct SRoomData, "SAVE: WRITE ERROR.", "Editor_FileSave(): Write error. Save aborted.\n")
/*
		nSz = fwrite(*(gppRooms + i), 1, sizeof(struct SRoomData), fPt);
		if (nSz != sizeof(struct SRoomData))
		{
			Msg_Init("SAVE: WRITE ERROR.", EDGOTO_POSX, EDGOTO_POSY);
			fprintf(stderr, "Editor_FileSave(): Write error. Save aborted.\n");
			fclose(fPt);
			return;
		}
		nSzTot += nSz;
*/
		nChkSum += Editor_sub_RoomChecksum((u32 *)*(gppRooms + i), sizeof(struct SRoomData) / 4);
	}

	// Checksum.
	SAVE(&nChkSum, u32, "SAVE: WRITE ERROR (CHK).", "Editor_FileSave(): Write error (Checksum). Save aborted.\n")
/*
	nSz = fwrite(&nChkSum, 1, sizeof(u32), fPt);
	if (nSz != sizeof(u32))
	{
		Msg_Init("SAVE: WRITE ERROR (CHK).", EDGOTO_POSX, EDGOTO_POSY);
		fprintf(stderr, "Editor_FileSave(): Write error (Checksum). Save aborted.\n");
		fclose(fPt);
		return;
	}
	nSzTot += nSz;
*/

	Msg_Init("DATA SAVED.", EDGOTO_POSX, EDGOTO_POSY);
	printf("Data saved. (%d rooms / %d bytes). Checksum = %X\n", gnRoomsNb, (int)nSzTot, nChkSum);

	fclose(fPt);

}
<<<

>>> pour conversion avec un "étage" de plus dans les maps.
/*
#pragma pack(1)
struct SRoomDataOld
{
	s16	pExits[4];		// Sorties (Haut, droite, bas, gauche). -1, pas de sortie.
	u8	nDimX, nDimY;	// Dimensions de la pièce.
	u8	nWallType;		// Type de mur.
	u8	nLightDefault;	// Eclairage par défaut. 1 = Oui, 0 = Non.
	u8	pTab[ROOM_MAX_X * ROOM_MAX_Y * (ROOM_MAX_Z - 1)];
};
#pragma pack()

// Lecture du fichier de données + conversion au nouveau format.
void Editor_FileLoad(char *pFilename)
{
	FILE	*fPt;
	u32	i;
	s32	j;
	s32	nSz, nSzTot;

	// fopen.
	if ((fPt = fopen(pFilename, "rb")) == NULL)
	{
		printf("Data file not found. Restart from scratch.\n");
		//
		Room_Add();
		Room_Set(0);
		return;
	}
	// Taille du fichier.
	fseek(fPt, 0, SEEK_END);
	nSzTot = ftell(fPt);
	fseek(fPt, 0, SEEK_SET);

	// Lecture des pièces une par une... hmmm...
	u32	nNbRooms = nSzTot / sizeof(struct SRoomDataOld);
	for (i = 0; i < nNbRooms; i++)
	{
		Room_Add();
		nSz = fread(*(gppRooms + i), 1, sizeof(struct SRoomDataOld), fPt);
		if (nSz != sizeof(struct SRoomDataOld))
		{
			fprintf(stderr, "Editor_FileSave(): write error. Save aborted.\n");
			fclose(fPt);
			return;
		}

		// Décalage des datas.
		for (j = ROOM_MAX_X * ROOM_MAX_Y * (ROOM_MAX_Z - 1); j >= 0 ; j--)
			(*(gppRooms + i))->pTab[j + (ROOM_MAX_X * ROOM_MAX_Y)] = (*(gppRooms + i))->pTab[j];
		// On efface le premier étage.
		for (j = 0; j < ROOM_MAX_X * ROOM_MAX_Y; j++)
			(*(gppRooms + i))->pTab[j] = 0;

	}

	fclose(fPt);

	printf("Data loaded. (%d rooms).\n", nNbRooms);

	Room_Set(0);

}
*/

<<<

>>>
// Lecture du fichier de données.
void Editor_FileLoad(char *pFilename)
{
	FILE	*fPt;
	u32	i;
	s32	nSz, nSzTot;

	// fopen.
	if ((fPt = fopen(pFilename, "rb")) == NULL)
	{
		printf("Data file not found. Restart from scratch.\n");
		//
		Room_Add();
		Room_Set(0);
		return;
	}
	// Taille du fichier.
	fseek(fPt, 0, SEEK_END);
	nSzTot = ftell(fPt);
	fseek(fPt, 0, SEEK_SET);

	// Lecture des pièces une par une... hmmm...
	u32	nNbRooms = nSzTot / sizeof(struct SRoomData);
	for (i = 0; i < nNbRooms; i++)
	{
		Room_Add();
		nSz = fread(*(gppRooms + i), 1, sizeof(struct SRoomData), fPt);
		if (nSz != sizeof(struct SRoomData))
		{
			fprintf(stderr, "Editor_FileSave(): write error. Save aborted.\n");
			fclose(fPt);
			return;
		}
	}

	fclose(fPt);

	printf("Data loaded. (%d rooms).\n", nNbRooms);

	Room_Set(0);


//	gnRoomsNb = nSz / sizeof(struct SRoomData);
/*
// Ajoute une pièce à la liste.
void Room_Add(void)
{
	u32	nRoomNo = gnRoomsNb;

	// Table de ptrs.
	gnRoomsNb++;
	if ((gppRooms = (struct SRoomData **)realloc(gppRooms, sizeof(struct SRoomData *) * gnRoomsNb)) == NULL)
	{
		fprintf(stderr, "Room_Add(): realloc failed.\n");
		exit (1);
	}
	// Malloc de la salle.
	if ((*(gppRooms + nRoomNo) = (struct SRoomData *)malloc(sizeof(struct SRoomData))) == NULL)
	{
		fprintf(stderr, "Room_Add(): malloc failed.\n");
		exit (1);
	}

	// Init data de la pièce.
	struct SRoomData	*pRoom;
	pRoom = *(gppRooms + nRoomNo);

	u32	i;
	for (i = 0; i < 4; i++) pRoom->pExits[i] = -1;		// Sorties (Haut, droite, bas, gauche). -1, pas de sortie.
	pRoom->nDimX = ROOM_MAX_X;	// Dimensions de la pièce.
	pRoom->nDimY = ROOM_MAX_Y;
	pRoom->nWallType = 0;		// Type de mur.
	pRoom->nLightDefault = 1;	// Eclairage par défaut. 1 = Oui, 0 = Non.

	Room_Clear(pRoom);

}
*/



}
<<<


>
/*
u8	nKbInput = 0;
s32	nKbNb = 0;		// -1 = Annulé.
u8	nKbNextAction = 0;
char	*pKbStr;
s16	nKbPosX, nKbPosY;

u8	nKbSavDir;		// Manual link, extra var.
*/
<

printf("kb: i=%d\n", i - SDLK_0);
printf("number = %d\n", nKbNb);

>

/*
		s32	nBlkX, nBlkY;

		nBlkX = gEditor.nBlk & 15;
		nBlkY = gEditor.nBlk >> 4;

		if (gVar.pKeys[SDLK_UP])
		{
			if (nBlkY) nBlkY--;
			gVar.pKeys[SDLK_UP] = 0;
		}
		if (gVar.pKeys[SDLK_DOWN])
		{
			if (nBlkY + 1 < (gVar.pBlk->h / GFX_BLK_H)) nBlkY++;
			gVar.pKeys[SDLK_DOWN] = 0;
		}
		if (gVar.pKeys[SDLK_LEFT])
		{
			if (nBlkX) nBlkX--;
			gVar.pKeys[SDLK_LEFT] = 0;
		}
		if (gVar.pKeys[SDLK_RIGHT])
		{
			if (nBlkX + 1 < (gVar.pBlk->w / GFX_BLK_W)) nBlkX++;
			gVar.pKeys[SDLK_RIGHT] = 0;
		}

		gEditor.nBlk = (nBlkY * 16) + nBlkX;
*/
<

//		sSrc.x = (gEditor.nBlk & 15) * GFX_BLK_W;
//		sSrc.y = (gEditor.nBlk >> 4) * GFX_BLK_H;
//		sSrc.w = GFX_BLK_W;
//		sSrc.h = GFX_BLK_H;
//		sDst.x = EDBLK_POSX;
//		sDst.y = SCR_Height - GFX_BLK_H - 10;
//		SDL_BlitSurface(gVar.pBlk, &sSrc, gVar.pScreen, &sDst);

>>
/*
		// Déplacement du cube d'édition.
		if (gVar.pKeys[SDLK_KP2])
		{
			if (gEditor.nPosY + 1 < ROOM_MAX_Y) gEditor.nPosY++;
			gVar.pKeys[SDLK_KP2] = 0;
		}
		if (gVar.pKeys[SDLK_KP5])
		{
			if (gEditor.nPosY > 0) gEditor.nPosY--;
			gVar.pKeys[SDLK_KP5] = 0;
		}
		if (gVar.pKeys[SDLK_KP3])
		{
			if (gEditor.nPosX + 1 < ROOM_MAX_X) gEditor.nPosX++;
			gVar.pKeys[SDLK_KP3] = 0;
		}
		if (gVar.pKeys[SDLK_KP1])
		{
			if (gEditor.nPosX > 0) gEditor.nPosX--;
			gVar.pKeys[SDLK_KP1] = 0;
		}
		if (gVar.pKeys[SDLK_KP9])
		{
			if (gEditor.nPosZ > 0) gEditor.nPosZ--;
			gVar.pKeys[SDLK_KP9] = 0;
		}
		if (gVar.pKeys[SDLK_KP6])
		{
			if (gEditor.nPosZ + 1 < ROOM_MAX_Z) gEditor.nPosZ++;
			gVar.pKeys[SDLK_KP6] = 0;
		}
*/
<<

>>

/*
//>>>
		s32	t;
		if (gVar.pKeys[SDLK_KP2])
		{
			t = gRoom.pRoomData->nDimX;
			if (++t <= ROOM_MAX_X)
			{
				gRoom.pRoomData->nDimX = t;
				Room_Init(0);
			}
			gVar.pKeys[SDLK_KP2] = 0;
		}
		if (gVar.pKeys[SDLK_KP5])
		{
			t = gRoom.pRoomData->nDimX;
			if (--t >= 2)
			{
				gRoom.pRoomData->nDimX = t;
				Room_Init(0);
			}
			gVar.pKeys[SDLK_KP5] = 0;
		}
		if (gVar.pKeys[SDLK_KP3])
		{
			t = gRoom.pRoomData->nDimY;
			if (++t <= ROOM_MAX_Y)
			{
				gRoom.pRoomData->nDimY = t;
				Room_Init(0);
			}
			gVar.pKeys[SDLK_KP3] = 0;
		}
		if (gVar.pKeys[SDLK_KP1])
		{
			t = gRoom.pRoomData->nDimY;
			if (--t >= 2)
			{
				gRoom.pRoomData->nDimY = t;
				Room_Init(0);
			}
			gVar.pKeys[SDLK_KP1] = 0;
		}
//<<<
*/
<<

>>
/*
		// Clic sur une flèche ?
		if (gVar.nMouseButtons & MOUSE_LMB && gEditor.nMouseArrowsZone >= 0)
		{
			if (gRoom.pRoomData->pExits[gEditor.nMouseArrowsZone] != -1)
				Room_Set(gRoom.pRoomData->pExits[gEditor.nMouseArrowsZone]);	// On va dans la pièce si elle existe.
			else
			{
				// Création d'une nouvelle pièce.
				u32	nLastRoom = gRoom.nRoomNo;
				Room_Add();
				gRoom.pRoomData->pExits[gEditor.nMouseArrowsZone] = gnRoomsNb - 1;
				Room_Set(gnRoomsNb - 1);
				gRoom.pRoomData->pExits[(gEditor.nMouseArrowsZone + 2) & 3] = nLastRoom;
			}
			gVar.nMouseButtons &= ~MOUSE_LMB;
		}

// Return sur zone de clic, entrée manuelle du n° de salle.

		// Flèches de direction, déplacement dans le chateau.
		if (gVar.pKeys[SDLK_UP])
		{
			if (gRoom.pRoomData->pExits[0] != -1) Room_Set(gRoom.pRoomData->pExits[0]);
			gVar.pKeys[SDLK_UP] = 0;
		}
		if (gVar.pKeys[SDLK_DOWN])
		{
			if (gRoom.pRoomData->pExits[2] != -1) Room_Set(gRoom.pRoomData->pExits[2]);
			gVar.pKeys[SDLK_DOWN] = 0;
		}
		if (gVar.pKeys[SDLK_RIGHT])
		{
			if (gRoom.pRoomData->pExits[1] != -1) Room_Set(gRoom.pRoomData->pExits[1]);
			gVar.pKeys[SDLK_RIGHT] = 0;
		}
		if (gVar.pKeys[SDLK_LEFT])
		{
			if (gRoom.pRoomData->pExits[3] != -1) Room_Set(gRoom.pRoomData->pExits[3]);
			gVar.pKeys[SDLK_LEFT] = 0;
		}
*/
<<

//	plot(EDARROWS_POSX + gpnArrowsZones[(gEditor.nMouseArrowsZone * 2)], EDARROWS_POSY + gpnArrowsZones[(gEditor.nMouseArrowsZone * 2) + 1]);
//	plot(EDARROWS_POSX + gpnArrowsZones[(gEditor.nMouseArrowsZone * 2)], EDARROWS_POSY + gpnArrowsZones[(gEditor.nMouseArrowsZone * 2) + 1] + ARROWSZONE_H-1);
//	plot(EDARROWS_POSX + gpnArrowsZones[(gEditor.nMouseArrowsZone * 2)]  + ARROWSZONE_W-1, EDARROWS_POSY + gpnArrowsZones[(gEditor.nMouseArrowsZone * 2) + 1]);
//	plot(EDARROWS_POSX + gpnArrowsZones[(gEditor.nMouseArrowsZone * 2)]  + ARROWSZONE_W-1, EDARROWS_POSY + gpnArrowsZones[(gEditor.nMouseArrowsZone * 2) + 1] + ARROWSZONE_H-1);


SDL_ShowCursor(gEditor.nMode == e_EditorMode_Map ? SDL_DISABLE : SDL_ENABLE);	// Show/hide le pointeur de la souris.

>
//	u8	nScreenMode;	// 0 = Windowed / 1 = Full screen.
//	SDL_Color	pSprColors[256 - SPR_Palette_Idx];	// Palette des sprites.
//	s16	pSinCos[256 + 64];	// Table contenant les sin et cos * 256, sur 256 angles.
//#define	GFX_NbBkg	1
//#define	MENU_NbBkg	2
//#define	SPR_Palette_Idx	32	// 0 à x : Palette du décor / x à 256 : Palette des sprites.
//#define	CLR_BLACK_IDX	152	// Index du noir dans la palette (hum hum...).
//	SDL_Surface *pLevel;	// Ptr sur l'image de fond d'un level.
//	SDL_Surface *pLev[GFX_NbBkg];	// Les images de fond.
//	SDL_Surface *pBackground;		// Ptr sur l'image de fond des menus.
//	SDL_Surface *pRotoPic;			// Ptr sur l'image pour rotozoom.
//	SDL_Rect	*pBkgRect;			// Ptr sur le rect pour déplacer le blit.
//	SDL_Rect	sBkgRect;			// Rect pour déplacer le blit.
//	SDL_Surface *pBkg[MENU_NbBkg];	// Les images de fond.

// Structure d'échange entre les différents modules.
struct SExg
{
	u32	nExitCode;	// Pour sortie du jeu. Tjs à 0, sauf pour sortie.

};
extern struct SExg gExg;
<

#include "rooms.h"

pTb[0] = pTb[1] = pTb[2] = '0'; pTb[3] = 0;

>>

/*
		SDL_Rect	sSrc, sDst;
		s32	nScrX, nScrY;

		s32	x, y, z;
		u32	nBlk;
*/

//		// Position du joueur.
//		u32	nPlayerXMin, nPlayerXMax, nPlayerYMin, nPlayerYMax;
//		nPlayerXMin = gHero.nPosX >> 12;
//		nPlayerYMin = gHero.nPosY >> 12;
//		nPlayerXMax = (gHero.nPosX + ((MAP_TILEW - 1) << 8)) >> 12;
//		nPlayerYMax = (gHero.nPosY + ((MAP_TILEH - 1) << 8)) >> 12;

/*
		ISO_ScreenPosition(gHero.nPosX >> 8, gHero.nPosY >> 8, gHero.nPosZ >> 8, &nScrX, &nScrY);
		plot(nScrX, nScrY);
		plot(nScrX, nScrY + MAP_TILEZ+1);
		ISO_ScreenPosition((gHero.nPosX >> 8) + MAP_TILEW-1, gHero.nPosY >> 8, gHero.nPosZ >> 8, &nScrX, &nScrY);
		plot(nScrX, nScrY);
		plot(nScrX, nScrY + MAP_TILEZ+1);
		ISO_ScreenPosition((gHero.nPosX >> 8) + MAP_TILEW-1, (gHero.nPosY >> 8) + MAP_TILEH-1, gHero.nPosZ >> 8, &nScrX, &nScrY);
		plot(nScrX, nScrY);
		plot(nScrX, nScrY + MAP_TILEZ+1);
		ISO_ScreenPosition(gHero.nPosX >> 8, (gHero.nPosY >> 8) + MAP_TILEH-1, gHero.nPosZ >> 8, &nScrX, &nScrY);
		plot(nScrX, nScrY);
		plot(nScrX, nScrY + MAP_TILEZ+1);
*/

<<

>>
/*
		ISO_ScreenPosition(gEditor.nPosX << 4, gEditor.nPosY << 4, gEditor.nPosZ << 4, &nScrX, &nScrY);
		plot(nScrX, nScrY);
		plot(nScrX, nScrY + MAP_TILEZ-1);
		ISO_ScreenPosition((gEditor.nPosX << 4) + MAP_TILEW-1, gEditor.nPosY << 4, gEditor.nPosZ << 4, &nScrX, &nScrY);
		plot(nScrX, nScrY);
		plot(nScrX, nScrY + MAP_TILEZ-1);
		ISO_ScreenPosition((gEditor.nPosX << 4) + MAP_TILEW-1, (gEditor.nPosY << 4) + MAP_TILEH-1, gEditor.nPosZ << 4, &nScrX, &nScrY);
		plot(nScrX, nScrY);
		plot(nScrX, nScrY + MAP_TILEZ-1);
		ISO_ScreenPosition(gEditor.nPosX << 4, (gEditor.nPosY << 4) + MAP_TILEH-1, gEditor.nPosZ << 4, &nScrX, &nScrY);
		plot(nScrX, nScrY);
		plot(nScrX, nScrY + MAP_TILEZ-1);
*/
<<

//			pTb[0] = ' '; pTb[1] = 0;
//			FontPrint(EDMODE_POSX, EDMODE_POSY+8, pTb);
//			pTb[0] = ' '; pTb[1] = 0;
//			FontPrint(EDMODE_POSX, EDMODE_POSY+8, pTb);
//			pTb[0] = ' '; pTb[1] = 0;
//			FontPrint(EDMODE_POSX, EDMODE_POSY+8, "MAP MODE");

>>
	// Allocation d'une surface pour le décor.
	gRoom.pBkg = SDL_CreateRGBSurface(SDL_SWSURFACE, SCR_Width, SCR_Height, 8, gRender.pScreenBuf2->format->Rmask, gVar.pScreen->format->Gmask, gVar.pScreen->format->Bmask, 0);
	if (gRoom.pBkg == NULL)
	{
		fprintf(stderr, "gRoom.pBkg: Unable to allocate SDL surface: %s\n", SDL_GetError());
		exit(1);
	}

	// On place le sol et les murs dans un buffer, on copiera ce buffer comme fond d'écran dans le jeu.
	SDL_FillRect(gRoom.pBkg, NULL, 0);

	SDL_Rect	sSrc, sDst;
	s32	nScrX, nScrY;

	// Affichage des murs.
	// Partie gauche.
	sSrc.x = 64 * gRoom.pRoomData->nWallType;
	sSrc.y = 0;
	sSrc.w = 16;
	sSrc.h = 128;
	ISO_ScreenPosition(0 * MAP_TILEW, (gRoom.pRoomData->nDimY - 1) * MAP_TILEH, (ROOM_MAX_Z - 1) * MAP_TILEZ, &nScrX, &nScrY);
	sDst.x = nScrX - (GFX_BLK_W / 2);
	sDst.y = nScrY + 8 - 128;
	SDL_BlitSurface(gVar.pWalls, &sSrc, gRoom.pBkg, &sDst);
	// Partie centrale.
	sSrc.x = (64 * gRoom.pRoomData->nWallType) + 16;
	sSrc.y = 0;
	sSrc.w = 32;
	sSrc.h = 128;
	ISO_ScreenPosition(0 * MAP_TILEW, 0 * MAP_TILEH, (ROOM_MAX_Z - 1) * MAP_TILEZ, &nScrX, &nScrY);
	sDst.x = nScrX - (GFX_BLK_W / 2);
	sDst.y = nScrY + 8 - 64-8;
	SDL_BlitSurface(gVar.pWalls, &sSrc, gRoom.pBkg, &sDst);
	// Partie droite.
	sSrc.x = (64 * gRoom.pRoomData->nWallType) + (16 * 3);
	sSrc.y = 0;
	sSrc.w = 16;
	sSrc.h = 128;
	ISO_ScreenPosition((gRoom.pRoomData->nDimX - 1) * MAP_TILEW, 0 * MAP_TILEH, (ROOM_MAX_Z - 1) * MAP_TILEZ, &nScrX, &nScrY);
	sDst.x = nScrX;// - (GFX_BLK_W / 2);
	sDst.y = nScrY + 8 - 128;
	SDL_BlitSurface(gVar.pWalls, &sSrc, gRoom.pBkg, &sDst);

	// Affichage du sol, niveau 0.
	u32	nBlk;
	s32	x, y, z;
	z = ROOM_MAX_Z - 1;
	for (y = 0; y < gRoom.pRoomData->nDimY; y++)
	for (x = 0; x < gRoom.pRoomData->nDimX; x++)
	{
		nBlk = gRoom.pRoomData->pTab[(ROOM_MAX_X * ROOM_MAX_Y * z) + (y * ROOM_MAX_X) + x];
		if (nBlk)
		{
			sSrc.x = (nBlk & 15) * GFX_BLK_W;
			sSrc.y = (nBlk >> 4) * GFX_BLK_H;
			sSrc.w = GFX_BLK_W;
			sSrc.h = GFX_BLK_H;
			ISO_ScreenPosition(x * MAP_TILEW, y * MAP_TILEH, z * MAP_TILEZ, &nScrX, &nScrY);
			sDst.x = nScrX - (GFX_BLK_W / 2);
			sDst.y = nScrY - (GFX_BLK_H - 32);
			SDL_BlitSurface(gVar.pBlk, &sSrc, gRoom.pBkg, &sDst);
		}
	}

	SDL_FreeSurface(gRoom.pBkg);

	SDL_Surface	*pBkg;				// Surface de "décor", le sol et les murs.
	u32	nPumpRoom;					// N° de salle et position du dernier gonfleur touché, pour restart.
	u32	nPumpX, nPumpY, nPumpZ;

SDL_SetPalette(gRoom.pBkg, SDL_LOGPAL, gVar.pColors, 0, 256);

<<

>>>
v1 en colonnes.
		for (i = 0; i < ROOM_MAX_X * ROOM_MAX_Y; i++)
		{
			nIdx = pDispOrd[i];//i;
			x = nIdx & 7;
			y = nIdx >> 3;
			if (x < gRoom.pRoomData->nDimX && y < gRoom.pRoomData->nDimY)
			for (z = ROOM_MAX_Z - 2; z >= 0; z--)
			{
				nBlk = gRoom.pRoomData->pTab[(ROOM_MAX_X * ROOM_MAX_Y * z) + (y * ROOM_MAX_X) + x];
				if (nBlk)
				{
					sSrc.x = (nBlk - 1) * GFX_BLK_W;
					sSrc.y = 0;
					sSrc.w = GFX_BLK_W;
					sSrc.h = GFX_BLK_H;
					ISO_ScreenPosition(x * MAP_TILEW, y * MAP_TILEH, z * MAP_TILEZ, &nScrX, &nScrY);
					sDst.x = nScrX - (GFX_BLK_W / 2);
					sDst.y = nScrY - (GFX_BLK_H - 32);
					SDL_BlitSurface(gVar.pBlk, &sSrc, gVar.pScreen, &sDst);
				}
			}
<<<



//+ test z < 0 => z = 0;

printf("%d\n", nPlayerIdx);

/*
// Structure pour le tri de l'affichage des cubes.
struct SCubeDisp
{
	s32	x, y;
	u32	nCubeNo;
	u32	nPrio;
};
*/



>>>
/*
		u32	x, y;
		for (y = 0; y < gRoom.nDimY; y++)
		{
			for (x = 0; x < gRoom.nDimX; x++)
			{
		ISO_ScreenPosition(0 + (x * MAP_TILEW), 0 + (y * MAP_TILEH), (ROOM_MAX_Z - 1) * MAP_TILEZ, &nScrX, &nScrY);
//		ISO_ScreenPosition(0 + (x * MAP_TILEW), 0 + (y * MAP_TILEH), 0, &nScrX, &nScrY);
		plot(nScrX, nScrY);
		ISO_ScreenPosition(15 + (x * MAP_TILEW), 0 + (y * MAP_TILEH), (ROOM_MAX_Z - 1) * MAP_TILEZ, &nScrX, &nScrY);
//		ISO_ScreenPosition(15 + (x * MAP_TILEW), 0 + (y * MAP_TILEH), 0, &nScrX, &nScrY);
		plot(nScrX, nScrY);
		ISO_ScreenPosition(15 + (x * MAP_TILEW), 15 + (y * MAP_TILEH), (ROOM_MAX_Z - 1) * MAP_TILEZ, &nScrX, &nScrY);
//		ISO_ScreenPosition(15 + (x * MAP_TILEW), 15 + (y * MAP_TILEH), 0, &nScrX, &nScrY);
		plot(nScrX, nScrY);
		ISO_ScreenPosition(0 + (x * MAP_TILEW), 15 + (y * MAP_TILEH), (ROOM_MAX_Z - 1) * MAP_TILEZ, &nScrX, &nScrY);
//		ISO_ScreenPosition(0 + (x * MAP_TILEW), 15 + (y * MAP_TILEH), 0, &nScrX, &nScrY);
		plot(nScrX, nScrY);
			}
		}
*/

//nPosX >>= 8;
//nPosY >>= 8;
//nPosZ >>= 8;

//	*pnPosX = ( ( ((nPosX - nPosY) * 256 * ISO_TILEW) / MAP_TILEW) / 256) + XZERO;
//	*pnPosY = ( ( ((nPosX + nPosY) * 256 * ISO_TILEH) / MAP_TILEH) / 256) + YZERO;
//	pos.x = ( ( ((src.x - src.y) * 256 * TILEW_ISO) / TILEW_2D) / 256) + XZERO;
//	pos.y = ( ( ((src.x + src.y) * 256 * TILEH_ISO) / TILEH_2D) / 256) + YZERO;

/*
	gHero.nPosX = 0;
	gHero.nPosY = 0;

	gHero.nPosX = 0;
	gHero.nPosY = 0;
*/
<<<

>>>>
#include <stdlib.h>
#include <stdio.h>

// >> Ca tu ignores, j'ai fait ça dans un projet classique
typedef	signed long	s32;
struct sdl_rect
{
	s32	x, y;
};
typedef struct sdl_rect	SDL_Rect;
// <<

#define	TILEW_2D	20	// Taille des tiles 2D
#define	TILEH_2D	20

#define	TILEW_ISO	10	// Taille des tiles ISO
#define	TILEH_ISO	10

#define	XZERO	0	// Origine du référentiel ISO
#define	YZERO	0

// Convertit un (x,y) 2D en (x,y) isométrique.
SDL_Rect convert2DtoISO(SDL_Rect src)
{
	SDL_Rect	pos;
	pos.x = ( ( ((src.x - src.y) * 256 * TILEW_ISO) / TILEW_2D) / 256) + XZERO;
	pos.y = ( ( ((src.x + src.y) * 256 * TILEH_ISO) / TILEH_2D) / 256) + YZERO;

	return (pos);
}

int main(void)
{
	SDL_Rect	dst;
	SDL_Rect	pSrc[] = { {0,0},{0,10},{10,0},{10,10},{20,10}, };
	s32	i;

	for (i = 0; i < (sizeof(pSrc)/sizeof(SDL_Rect)); i++)
	{
		dst = convert2DtoISO(pSrc[i]);
		printf("src: x=%d y=%d / dst: x=%d y=%d\n", (int)pSrc[i].x, (int)pSrc[i].y, (int)dst.x, (int)dst.y);
	}

	return (0);
}
<<<<


/*
		s32	t;
		if (gVar.pKeys[SDLK_KP2])
		{
			t = gRoom.nDimX;
			if (++t <= ROOM_MAX_X) Room_Init(t, gRoom.nDimY);
			gVar.pKeys[SDLK_KP2] = 0;
		}
		if (gVar.pKeys[SDLK_KP5])
		{
			t = gRoom.nDimX;
			if (--t >= 2) Room_Init(t, gRoom.nDimY);
			gVar.pKeys[SDLK_KP5] = 0;
		}
		if (gVar.pKeys[SDLK_KP3])
		{
			t = gRoom.nDimY;
			if (++t <= ROOM_MAX_Y) Room_Init(gRoom.nDimX, t);
			gVar.pKeys[SDLK_KP3] = 0;
		}
		if (gVar.pKeys[SDLK_KP1])
		{
			t = gRoom.nDimY;
			if (--t >= 2) Room_Init(gRoom.nDimX, t);
			gVar.pKeys[SDLK_KP1] = 0;
		}
*/


